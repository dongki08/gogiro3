{"version":3,"file":"static/js/915.a7e026e8.chunk.js","mappings":"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","sources":["components/common/Fetching.js","pages/butcher/ButcherPickupPage.js"],"sourcesContent":["import React from \"react\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { ColorStyle } from \"../../styles/common/CommonStyle\";\r\n\r\nconst Fetching = () => {\r\n  const laodingCss = {\r\n    position: \"fixed\",\r\n    left: 0,\r\n    top: 0,\r\n    zIndex: 999,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    background: \"rgba(255,255,255,0.8)\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    gap: \"20px\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  };\r\n  return (\r\n    <div style={laodingCss}>\r\n      <ClipLoader size={50} color={ColorStyle.primary} loading={true} />\r\n      <div\r\n        style={{\r\n          fontFamily: \"DAEAM_LEE_TAE_JOON\",\r\n          fontSize: \"25px\",\r\n        }}\r\n      >\r\n        맛있게 굽고 있는 중...\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Fetching;\r\n","import moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router\";\r\nimport Select from \"react-select\";\r\nimport { getBInfo, postPickup } from \"../../api/butcherApi\";\r\nimport ResultModal from \"../../components/common/ResultModal\";\r\nimport ReserCalendar from \"../../components/meat/ReserCalendar\";\r\nimport useCustomHook from \"../../components/meat/hooks/useCustomHook\";\r\n\r\nimport {\r\n  MenuWrapper,\r\n  PickupItemCount,\r\n  PickupItemCountWrap,\r\n  PickupItemOption,\r\n  PickupItemSelect,\r\n  PickupItemWrap,\r\n  PickupMenuAddBtn,\r\n  PickupTimeSelectBox,\r\n  PickupTimeSelector,\r\n  ReserContent,\r\n  ReserCountWrap,\r\n  ReserFormWrap,\r\n  ReserItem,\r\n  ReserItemWrap,\r\n  ReserRequireInput,\r\n  ReserSubmitBtn,\r\n  ReserTimeItem,\r\n  ReserTimeWrap,\r\n  ReserTitle,\r\n  ReserWrap,\r\n  ReserWrapper,\r\n  ReviewImageDeleteBtn,\r\n} from \"./styles/ButcherPickupStyle\";\r\nimport Fetching from \"../../components/common/Fetching\";\r\n\r\nconst MeatDetailPage = () => {\r\n  const { openModal, isModal, closeModal } = useCustomHook();\r\n  const navigate = useNavigate();\r\n  const { ibutcher } = useParams();\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const name = queryParams.get(\"name\");\r\n  const storeName = location.state?.storeName;\r\n  const [fetching, setFetching] = useState(false);\r\n\r\n  const [storeInfo, setStoreInfo] = useState({});\r\n  const [selectedItems, setSelectedItems] = useState([\r\n    { item: \"\", quantity: 1 },\r\n  ]);\r\n  const deleteBtn = process.env.PUBLIC_URL + `/assets/images/delete_button.svg`;\r\n  const addBtn = process.env.PUBLIC_URL + `/assets/images/add_menu.png`;\r\n  const disableBtn = process.env.PUBLIC_URL + `/assets/images/disable.png`;\r\n  const arrowDown = process.env.PUBLIC_URL + `/assets/images/arrow_down.png`;\r\n  console.log(storeInfo);\r\n  console.log(storeInfo.menus);\r\n  // 가게 정보를 가져와서 성공하면 setStoreInfo를 사용하여 상태를 업데이트합니다.\r\n  useEffect(() => {\r\n    getBInfo({ ibutcher, successFn, failFn, errorFn });\r\n  }, []);\r\n  const successFn = result => {\r\n    console.log(result);\r\n    setStoreInfo(result);\r\n    setFetching(false);\r\n  };\r\n  const failFn = result => {\r\n    console.log(result);\r\n    setStoreInfo(result);\r\n    setFetching(false);\r\n  };\r\n  const errorFn = error => {\r\n    console.log(error);\r\n  };\r\n\r\n  const handleAddForm = () => {\r\n    setSelectedItems([...selectedItems, { item: \"\", quantity: 1 }]);\r\n  };\r\n\r\n  const handleRemoveForm = index => {\r\n    const values = [...selectedItems];\r\n    values.splice(index, 1);\r\n    setSelectedItems(values);\r\n  };\r\n\r\n  // const handleChange = (index, event) => {\r\n  //   const values = [...selectedItems];\r\n  //   values[index][event.target.name] = event.target.value;\r\n  //   setSelectedItems(values);\r\n  // };\r\n  const handleChange = (index, event) => {\r\n    const values = [...selectedItems];\r\n    // 메뉴 이름을 사용하여 storeInfo.menus에서 해당 메뉴 객체를 찾습니다.\r\n    const selectedMenu = storeInfo.menus.find(\r\n      menu => menu.menu === event.target.value,\r\n    );\r\n    // 선택된 메뉴의 ibutMenu 값을 찾아서 함께 저장합니다.\r\n    if (selectedMenu) {\r\n      values[index] = {\r\n        ...values[index],\r\n        item: selectedMenu.menu,\r\n        ibutMenu: selectedMenu.ibutMenu,\r\n      };\r\n    } else {\r\n      // 선택된 메뉴가 없는 경우, item만 업데이트합니다.\r\n      values[index][event.target.name] = event.target.value;\r\n    }\r\n    setSelectedItems(values);\r\n  };\r\n\r\n  const handleIncrease = index => {\r\n    const values = [...selectedItems];\r\n    values[index].quantity++;\r\n    setSelectedItems(values);\r\n  };\r\n\r\n  const handleDecrease = index => {\r\n    const values = [...selectedItems];\r\n    if (values[index].quantity > 1) {\r\n      values[index].quantity--;\r\n    } else {\r\n      alert(\"수량은 1 이상이어야 합니다.\");\r\n    }\r\n    setSelectedItems(values);\r\n  };\r\n  const storeNum = ibutcher;\r\n\r\n  const [requiredMsg, setRequiredMsg] = useState(\"\");\r\n  const handleRequireMsg = e => {\r\n    setRequiredMsg(e.target.value);\r\n  };\r\n\r\n  const createdate = new Date();\r\n  const nowdata = moment(createdate).format(\"YYYY-MM-DD\");\r\n  const [selectedDate, setSelectedDate] = useState(nowdata);\r\n\r\n  const handleDateChange = formattedDate => {\r\n    if (formattedDate) {\r\n      const dateData = moment(formattedDate).format(\"YYYY-MM-DD\");\r\n      setSelectedDate(dateData);\r\n      console.log(\"값임 :\", dateData);\r\n      return dateData;\r\n    } else {\r\n      console.log(\"formattedDate is undefined\");\r\n    }\r\n  };\r\n\r\n  // ! 시간 (00시 : 00분)\r\n  const [meridiem, setMeridiem] = useState(\"AM\");\r\n  const [hour, setHour] = useState(\"\");\r\n  const [minute, setMinute] = useState(\"\");\r\n  // ! 오픈시간 (openingHour / closeingHour)\r\n  const [openingHour, setOpeningHour] = useState(9);\r\n  const [closingHour, setClosingHour] = useState(20);\r\n\r\n  const meridiemOptions = [\r\n    { value: \"AM\", label: \"오전\" },\r\n    { value: \"PM\", label: \"오후\" },\r\n  ];\r\n\r\n  const hourOptions = Array.from({ length: 12 }, (_, i) => ({\r\n    value: i + 1,\r\n    label: String(i + 1).padStart(2, \"0\"),\r\n  })).filter((option, index) => {\r\n    if (meridiem === \"AM\") {\r\n      return option.value >= openingHour && option.value <= 12;\r\n    } else {\r\n      const value24 = (option.value % 12) + 12;\r\n      return value24 <= closingHour;\r\n    }\r\n  });\r\n\r\n  const minuteOptions = Array.from({ length: 6 }, (_, i) => ({\r\n    value: i * 10,\r\n    label: String(i * 10).padStart(2, \"0\"),\r\n  }));\r\n  const customStyles = {\r\n    control: (styles, { isFocused, isSelected }) => ({\r\n      ...styles,\r\n      border: isFocused || isSelected ? \"1.5px solid #066E52\" : \"none\",\r\n      boxShadow: isFocused ? \"0 0 0 1px #066E52\" : null,\r\n      \"&:hover\": {\r\n        border: \"1.5px solid #066E52\",\r\n      },\r\n    }),\r\n    menu: styles => ({ ...styles, zIndex: 999 }),\r\n    singleValue: (provided, state) => ({\r\n      ...provided,\r\n      fontFamily: \"DAEAM_LEE_TAE_JOON\",\r\n      fontSize: \"14px\",\r\n    }),\r\n    option: (provided, state) => ({\r\n      ...provided,\r\n      fontFamily: \"DAEAM_LEE_TAE_JOON\",\r\n      fontSize: \"14px\",\r\n    }),\r\n    placeholder: (provided, state) => ({\r\n      ...provided,\r\n      fontFamily: \"DAEAM_LEE_TAE_JOON\",\r\n      fontSize: \"14px\",\r\n    }),\r\n  };\r\n\r\n  // ! POST\r\n  const handlePickupSubmit = () => {\r\n    // const menus = selectedItems.map((item, index) => ({\r\n    //   ibutMenu: index + 1,\r\n    //   count: item.quantity,\r\n    // }));\r\n    const menus = selectedItems.map(item => ({\r\n      ibutMenu: item.ibutMenu, // 수정된 부분\r\n      count: item.quantity,\r\n    }));\r\n\r\n    if (!meridiem || !hour) {\r\n      openModal(\"시간입력오류\", \"시간을 입력해주세요.\", closeModal);\r\n      return;\r\n    }\r\n    const hour24 = meridiem === \"PM\" ? (hour % 12) + 12 : hour % 12;\r\n    const time = `${String(hour24).padStart(2, \"0\")}:${String(minute).padStart(\r\n      2,\r\n      \"0\",\r\n    )}`; // 분도 두 자리 숫자로 출력\r\n    const timeline = selectedDate + \" \" + time + \":00\";\r\n    const pickupData = {\r\n      ibutcher: parseInt(ibutcher),\r\n      date: timeline,\r\n      request: requiredMsg,\r\n      menus: menus,\r\n    };\r\n    console.log(\"픽업데이터 \", pickupData);\r\n    setFetching(true);\r\n    postPickup({ pickupData, successPickupFn, failPickupFn, errorPickupFn });\r\n  };\r\n  const successPickupFn = result => {\r\n    console.log(result);\r\n    setStoreInfo(result);\r\n    setFetching(false);\r\n    openModal(\"등록완료\", \"픽업예약이 완료되었습니다.\", () => {\r\n      closeModal, navigate(-1);\r\n    });\r\n  };\r\n  const failPickupFn = result => {\r\n    console.log(result);\r\n    setStoreInfo(result);\r\n    setFetching(false);\r\n  };\r\n  const errorPickupFn = error => {\r\n    setFetching(false);\r\n    if (error.response && error.response.status === 400) {\r\n      openModal(\"등록 실패\", \"양식을 다시 확인해주세요.\", closeModal);\r\n    }\r\n    if (error.response && error.response.status === 500) {\r\n      openModal(\"등록 실패\", \"관리자에게 문의해주세요.\", closeModal);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {fetching ? <Fetching /> : null}\r\n      {isModal.isOpen && (\r\n        <ResultModal\r\n          title={isModal.title}\r\n          content={isModal.content}\r\n          callFn={isModal.callFn}\r\n        />\r\n      )}\r\n      <ReserWrapper>\r\n        {/* title */}\r\n        <ReserTitle>\r\n          <span>픽업하기</span>\r\n        </ReserTitle>\r\n        {/* wrapper */}\r\n        <ReserWrap>\r\n          {/* Item - Wrapper */}\r\n          <ReserItemWrap>\r\n            {/* \r\n            // * 가게명 \r\n            */}\r\n            <ReserFormWrap>\r\n              <ReserItem>\r\n                <span>가게명</span>\r\n              </ReserItem>\r\n              <ReserContent>\r\n                <span>{name}</span>\r\n              </ReserContent>\r\n            </ReserFormWrap>\r\n            {/* \r\n            // * 예약날짜 \r\n            */}\r\n            <ReserFormWrap>\r\n              <ReserItem>\r\n                <span>날짜</span>\r\n              </ReserItem>\r\n              <ReserContent>\r\n                <span>{selectedDate}</span>\r\n              </ReserContent>\r\n            </ReserFormWrap>\r\n            {/* \r\n            // * 예약가능시간 \r\n            */}\r\n            <ReserTimeWrap>\r\n              <ReserItem>\r\n                <span>예약가능시간</span>\r\n              </ReserItem>\r\n              {/* 에약 가능 시간대 버튼 */}\r\n              <ReserTimeItem>\r\n                <PickupTimeSelector>\r\n                  <PickupTimeSelectBox>\r\n                    <Select\r\n                      options={meridiemOptions}\r\n                      placeholder=\"오전/오후\"\r\n                      onChange={option => setMeridiem(option.value)}\r\n                      onMenuOpen={() => setMeridiem(meridiem)}\r\n                      styles={customStyles}\r\n                    />\r\n                  </PickupTimeSelectBox>\r\n                  <PickupTimeSelectBox>\r\n                    <Select\r\n                      options={hourOptions}\r\n                      placeholder=\"시\"\r\n                      onChange={option => setHour(option.value)}\r\n                      onMenuOpen={() => setHour(hour)}\r\n                      styles={customStyles}\r\n                    />\r\n                  </PickupTimeSelectBox>\r\n                  <PickupTimeSelectBox>\r\n                    <Select\r\n                      options={minuteOptions}\r\n                      placeholder=\"분\"\r\n                      onChange={option => setMinute(option.value)}\r\n                      onMenuOpen={() => setMinute(minute)}\r\n                      styles={customStyles}\r\n                    />\r\n                  </PickupTimeSelectBox>\r\n                </PickupTimeSelector>\r\n              </ReserTimeItem>\r\n            </ReserTimeWrap>\r\n            {/* \r\n            // * 인원 수 \r\n            */}\r\n            <ReserCountWrap>\r\n              <ReserItem>\r\n                <span>메뉴</span>\r\n              </ReserItem>\r\n              {/* Counting Box */}\r\n              <div>\r\n                <MenuWrapper>\r\n                  {selectedItems.map((selectedItem, index) => (\r\n                    <PickupItemWrap key={index}>\r\n                      <PickupItemSelect\r\n                        name=\"item\"\r\n                        value={selectedItem.item || undefined}\r\n                        onChange={event => handleChange(index, event)}\r\n                      >\r\n                        <PickupItemOption value=\"\">\r\n                          메뉴를 선택해주세요 ᐁ\r\n                        </PickupItemOption>\r\n                        {Array.isArray(storeInfo.menus) &&\r\n                          storeInfo.menus\r\n                            .filter(\r\n                              menu =>\r\n                                !selectedItems\r\n                                  .slice(0, index)\r\n                                  .concat(selectedItems.slice(index + 1))\r\n                                  .map(item => item.item)\r\n                                  .includes(menu.menu),\r\n                            )\r\n                            .map(menu => (\r\n                              <PickupItemOption\r\n                                key={menu.menu}\r\n                                value={menu.menu}\r\n                              >\r\n                                {menu.menu}\r\n                              </PickupItemOption>\r\n                            ))}\r\n                      </PickupItemSelect>\r\n                      <PickupItemCountWrap>\r\n                        <PickupItemCount onClick={() => handleDecrease(index)}>\r\n                          <span>-</span>\r\n                        </PickupItemCount>\r\n                        <PickupItemCount>\r\n                          <span>{selectedItem.quantity}</span>\r\n                        </PickupItemCount>\r\n                        <PickupItemCount onClick={() => handleIncrease(index)}>\r\n                          <span>+</span>\r\n                        </PickupItemCount>\r\n                      </PickupItemCountWrap>\r\n\r\n                      {index !== 0 && (\r\n                        <ReviewImageDeleteBtn\r\n                          onClick={() => handleRemoveForm(index)}\r\n                          bgImg={deleteBtn}\r\n                        ></ReviewImageDeleteBtn>\r\n                      )}\r\n                    </PickupItemWrap>\r\n                  ))}\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <PickupMenuAddBtn\r\n                      onClick={handleAddForm}\r\n                      disabled={\r\n                        storeInfo.menus &&\r\n                        selectedItems.length === storeInfo.menus.length\r\n                      }\r\n                      bgImg={addBtn}\r\n                      disblaImg={disableBtn}\r\n                    />\r\n                  </div>\r\n                </MenuWrapper>\r\n              </div>\r\n            </ReserCountWrap>\r\n\r\n            {/* \r\n            // * 요청사항\r\n            */}\r\n            <ReserFormWrap>\r\n              <ReserItem>\r\n                <span>요청사항</span>\r\n              </ReserItem>\r\n              <ReserContent>\r\n                <ReserRequireInput\r\n                  type=\"text\"\r\n                  name=\"requireMsg\"\r\n                  onChange={e => handleRequireMsg(e)}\r\n                  value={requiredMsg}\r\n                  placeholder=\"요청사항을 입력해주세요. (30자 내외)\"\r\n                  maxLength=\"50\"\r\n                />\r\n              </ReserContent>\r\n            </ReserFormWrap>\r\n          </ReserItemWrap>\r\n          {/* Calendar */}\r\n          <div>\r\n            <ReserCalendar onDateChange={handleDateChange} />\r\n          </div>\r\n        </ReserWrap>\r\n        {/* button */}\r\n        <ReserSubmitBtn onClick={handlePickupSubmit}>\r\n          <span>픽업예약하기</span>\r\n        </ReserSubmitBtn>\r\n      </ReserWrapper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeatDetailPage;\r\n"],"names":["Fetching","_jsxs","style","position","left","top","zIndex","width","height","background","display","flexDirection","gap","justifyContent","alignItems","children","_jsx","ClipLoader","size","color","ColorStyle","primary","loading","fontFamily","fontSize","MeatDetailPage","_location$state","openModal","isModal","closeModal","useCustomHook","navigate","useNavigate","ibutcher","useParams","location","useLocation","name","URLSearchParams","search","get","fetching","setFetching","state","storeName","useState","storeInfo","setStoreInfo","selectedItems","setSelectedItems","item","quantity","console","log","menus","useEffect","getBInfo","successFn","failFn","errorFn","result","error","requiredMsg","setRequiredMsg","createdate","Date","nowdata","moment","format","selectedDate","setSelectedDate","meridiem","setMeridiem","hour","setHour","minute","setMinute","openingHour","setOpeningHour","closingHour","setClosingHour","hourOptions","Array","from","length","_","i","value","label","String","padStart","filter","option","index","minuteOptions","customStyles","control","styles","_ref","isFocused","isSelected","border","boxShadow","menu","singleValue","provided","placeholder","successPickupFn","failPickupFn","errorPickupFn","response","status","isOpen","ResultModal","title","content","callFn","ReserWrapper","ReserTitle","ReserWrap","ReserItemWrap","ReserFormWrap","ReserItem","ReserContent","ReserTimeWrap","ReserTimeItem","PickupTimeSelector","PickupTimeSelectBox","Select","options","onChange","onMenuOpen","ReserCountWrap","MenuWrapper","map","selectedItem","PickupItemWrap","PickupItemSelect","undefined","event","handleChange","values","selectedMenu","find","target","ibutMenu","PickupItemOption","isArray","slice","concat","includes","PickupItemCountWrap","PickupItemCount","onClick","alert","handleDecrease","handleIncrease","ReviewImageDeleteBtn","splice","handleRemoveForm","bgImg","PickupMenuAddBtn","handleAddForm","disabled","disblaImg","ReserRequireInput","type","e","handleRequireMsg","maxLength","ReserCalendar","onDateChange","formattedDate","dateData","ReserSubmitBtn","handlePickupSubmit","count","time","timeline","pickupData","parseInt","date","request","postPickup"],"sourceRoot":""}