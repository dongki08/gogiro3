{"version":3,"file":"static/js/3747.72f7f5e3.chunk.js","mappings":"qRAsCaA,GAAAC,EAAA,IAAAC,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAAG,EAAA,IAAAH,QAAAI,EAAA,IAAAJ,QAAAK,EAAA,IAAAL,QAAAM,EAAA,IAAAN,QAAAO,EAAA,IAAAP,QAAAQ,EAAA,IAAAR,QAAAS,EAAA,IAAAT,QAAAU,EAAA,IAAAV,QAAAW,EAAA,IAAAX,QAAAY,EAAA,IAAAZ,QAAAa,EAAA,IAAAb,QAAAc,EAAA,IAAAC,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAAG,EAAA,IAAAH,QAAAI,EAAA,IAAAJ,QAAAK,EAAA,IAAAL,QAAAM,EAAA,IAAAN,QAAAO,EAAA,IAAAP,QAAAQ,EAAA,IAAAR,QAAN,cAMGS,EAAAA,EAwBRC,WAAAA,CACEC,EACOC,GAQPC,SAAMC,EAAAA,EAAAA,GAAA,KAAAN,IAAAM,EAAAA,EAAAA,GAAA,KAAAP,IAAAO,EAAAA,EAAAA,GAAA,KAAAR,IAAAQ,EAAAA,EAAAA,GAAA,KAAAT,IAAAS,EAAAA,EAAAA,GAAA,KAAAV,IAAAU,EAAAA,EAAAA,GAAA,KAAAX,IAAAW,EAAAA,EAAAA,GAAA,KAAAZ,IAAAY,EAAAA,EAAAA,GAAA,KAAAb,IAAAa,EAAAA,EAAAA,GAAA,KAAAf,IAAAgB,EAAAA,EAAAA,GAAA,KAAA/B,EAAA,CAAAgC,UAAA,EAAAC,WAAA,KAAAF,EAAAA,EAAAA,GAAA,KAAA7B,EAAA,CAAA8B,UAAA,EAAAC,WAhC4D,KAAAF,EAAAA,EAAAA,GAAA,KAAA5B,EAAA,CAAA6B,UAAA,EAAAC,WACR,KAAAF,EAAAA,EAAAA,GAAA,KAAA3B,EAAA,CAAA4B,UAAA,EAAAC,WACP,KAAAF,EAAAA,EAAAA,GAAA,KAAA1B,EAAA,CAAA2B,UAAA,EAAAC,WAAA,KAAAF,EAAAA,EAAAA,GAAA,KAAAzB,EAAA,CAAA0B,UAAA,EAAAC,WAAA,KAAAF,EAAAA,EAAAA,GAAA,KAAAxB,EAAA,CAAAyB,UAAA,EAAAC,WAAA,KAAAF,EAAAA,EAAAA,GAAA,KAAAvB,EAAA,CAAAwB,UAAA,EAAAC,WAAA,KAAAF,EAAAA,EAAAA,GAAA,KAAAtB,EAAA,CAAAuB,UAAA,EAAAC,WAAA,KAWrDF,EAAAA,EAAAA,GAAA,KAAArB,EAAA,CAAAsB,UAAA,EAAAC,WAAA,KAAAF,EAAAA,EAAAA,GAAA,KAAApB,EAAA,CAAAqB,UAAA,EAAAC,WAAA,KAAAF,EAAAA,EAAAA,GAAA,KAAAnB,EAAA,CAAAoB,UAAA,EAAAC,WAAA,KAAAF,EAAAA,EAAAA,GAAA,KAAAlB,EAAA,CAAAmB,UAAA,EAAAC,WAAA,KAAAF,EAAAA,EAAAA,GAAA,KAAAjB,EAAA,CAAAkB,UAAA,EAAAC,MAOgB,IAAIC,MAIX,KAAAN,QAAAA,GAUPO,EAAAA,EAAAA,GAAAC,KAAApC,EAAe2B,IACfQ,EAAAA,EAAAA,GAAAC,KAAA7B,EAAoB,MACpB6B,KAAKC,cACLD,KAAKE,WAAWV,EAClB,CAEUS,WAAAA,GACRD,KAAKG,QAAUH,KAAKG,QAAQC,KAAKJ,KACnC,CAEUK,WAAAA,GACoB,IAAxBL,KAAKM,UAAUC,QACjBC,EAAAA,EAAAA,GAAAR,KAAAlC,GAAmB2C,YAAYT,MAE3BU,GAAAF,EAAAA,EAAAA,GAAmBR,KAAAlC,GAAoBkC,KAAKR,UAC9CmB,EAAAA,EAAAA,GAAAX,KAAArB,EAAAiC,GAAAC,KAAAb,MAEAA,KAAKc,gBAGPH,EAAAA,EAAAA,GAAAX,KAAAhB,EAAA+B,GAAAF,KAAAb,MAEJ,CAEUgB,aAAAA,GACHhB,KAAKiB,gBACRjB,KAAKkB,SAET,CAEAC,sBAAAA,GACE,OAAOC,GAAAZ,EAAAA,EAAAA,GACLR,KAAAlC,GACAkC,KAAKR,QACLQ,KAAKR,QAAQ6B,mBAEjB,CAEAC,wBAAAA,GACE,OAAOF,GAAAZ,EAAAA,EAAAA,GACLR,KAAAlC,GACAkC,KAAKR,QACLQ,KAAKR,QAAQ+B,qBAEjB,CAEAL,OAAAA,GACElB,KAAKM,UAAY,IAAIR,KACrBa,EAAAA,EAAAA,GAAAX,KAAAf,EAAAuC,GAAAX,KAAAb,OACAW,EAAAA,EAAAA,GAAAX,KAAAd,EAAAuC,GAAAZ,KAAAb,OACAQ,EAAAA,EAAAA,GAAAR,KAAAlC,GAAmB4D,eAAe1B,KACpC,CAEAE,UAAAA,CACEV,EAOAmC,GAEA,MAAMC,EAAc5B,KAAKR,QACnBqC,GAAArB,EAAAA,EAAAA,GAAYR,KAAAlC,GAIlB,GAFAkC,KAAKR,SAAUgB,EAAAA,EAAAA,GAAAR,KAAApC,GAAakE,oBAAoBtC,GAGd,qBAAzBQ,KAAKR,QAAQuC,SACY,mBAAzB/B,KAAKR,QAAQuC,QAEpB,MAAM,IAAIC,MAAM,qCAGlBrB,EAAAA,EAAAA,GAAAX,KAAAb,EAAA8C,GAAApB,KAAAb,OAEKkC,EAAAA,EAAAA,IAAoBlC,KAAKR,QAASoC,KACrCpB,EAAAA,EAAAA,GAAAR,KAAApC,GAAauE,gBAAgBC,OAAO,CAClCC,KAAM,yBACNC,OAAA9B,EAAAA,EAAAA,GAAOR,KAAAlC,GACPyE,SAAUvC,OAId,MAAMwC,EAAUxC,KAAKiB,eAInBuB,GACAC,GAAAjC,EAAAA,EAAAA,GACER,KAAAlC,GACA+D,EACA7B,KAAKR,QACLoC,KAGFjB,EAAAA,EAAAA,GAAAX,KAAArB,EAAAiC,GAAAC,KAAAb,MAIFA,KAAKc,aAAaa,IAIhBa,IACChC,EAAAA,EAAAA,GAAAR,KAAAlC,KAAuB+D,GACtB7B,KAAKR,QAAQuC,UAAYH,EAAYG,SACrC/B,KAAKR,QAAQkD,YAAcd,EAAYc,YAEzC/B,EAAAA,EAAAA,GAAAX,KAAAnB,EAAA8D,GAAA9B,KAAAb,MAGF,MAAM4C,GAAAjC,EAAAA,EAAAA,GAAsBX,KAAAlB,EAAA+D,GAAAhC,KAAAb,OAI1BwC,IACChC,EAAAA,EAAAA,GAAAR,KAAAlC,KAAuB+D,GACtB7B,KAAKR,QAAQuC,UAAYH,EAAYG,SACrCa,KAAApC,EAAAA,EAAAA,GAAwBR,KAAAvB,KAE1BkC,EAAAA,EAAAA,GAAAX,KAAAjB,EAAA+D,GAAAjC,KAAAb,KAA4B4C,EAEhC,CAEAG,mBAAAA,CACEvD,GAQA,MAAM8C,GAAQ9B,EAAAA,EAAAA,GAAAR,KAAApC,GAAauE,gBAAgBa,OAAAxC,EAAAA,EAAAA,GAAMR,KAAApC,GAAc4B,GAEzDyD,EAASjD,KAAKkD,aAAaZ,EAAO9C,GAuBxC,OAmfJ,SAOE+C,EACAY,GAIA,KAAKjB,EAAAA,EAAAA,IAAoBK,EAASa,mBAAoBD,GACpD,OAAO,EAIT,OAAO,CACT,CA1hBQE,CAAsCrD,KAAMiD,MAiB9ClD,EAAAA,EAAAA,GAAAC,KAAAhC,EAAsBiF,IACtBlD,EAAAA,EAAAA,GAAAC,KAAA9B,EAA6B8B,KAAKR,UAClCO,EAAAA,EAAAA,GAAAC,KAAA/B,GAA2BuC,EAAAA,EAAAA,GAAAR,KAAAlC,GAAmBwF,QAEzCL,CACT,CAEAG,gBAAAA,GACE,OAAA5C,EAAAA,EAAAA,GAAOR,KAAAhC,EACT,CAEAuF,WAAAA,CACEN,GAEA,MAAMO,EAAgB,CAAC,EAavB,OAXAC,OAAOC,KAAKT,GAAQU,SAASC,IAC3BH,OAAOI,eAAeL,EAAeI,EAAK,CACxCE,cAAc,EACdC,YAAY,EACZC,IAAKA,MACHxD,EAAAA,EAAAA,GAAAR,KAAAtB,GAAmBuF,IAAIL,GAChBX,EAAOW,KAEhB,IAGGJ,CACT,CAEAU,eAAAA,GACE,OAAA1D,EAAAA,EAAAA,GAAOR,KAAAlC,EACT,CAEAqC,OAAAA,GAEE,OAFWX,GAAQ2E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoB,CAAC,EAGxC,OAAOnE,KAAKsE,MAAM,IACb9E,GAEP,CAEA+E,eAAAA,CACE/E,GAQA,MAAMgF,GAAmBhE,EAAAA,EAAAA,GAAAR,KAAApC,GAAakE,oBAAoBtC,GAEpD8C,GAAQ9B,EAAAA,EAAAA,GAAAR,KAAApC,GACXuE,gBACAa,OAAAxC,EAAAA,EAAAA,GAAMR,KAAApC,GAAc4G,GAGvB,OAFAlC,EAAMmC,sBAAuB,EAEtBnC,EAAMgC,QAAQI,MAAK,IAAM1E,KAAKkD,aAAaZ,EAAOkC,IAC3D,CAEUF,KAAAA,CACRK,GAC6C,IAAAC,EAC7C,OAAOjE,EAAAA,EAAAA,GAAAX,KAAArB,EAAAiC,GAAAC,KAAAb,KAAmB,IACrB2E,EACHE,cAA4B,QAA5BD,EAAeD,EAAaE,qBAAA,IAAAD,GAAAA,IAC3BF,MAAK,KACN1E,KAAKc,gBACLN,EAAAA,EAAAA,GAAOR,KAAAhC,KAEX,CAmGUkF,YAAAA,CACRZ,EACA9C,GAQA,MAAMqC,GAAArB,EAAAA,EAAAA,GAAYR,KAAAlC,GACZ8D,EAAc5B,KAAKR,QACnBsF,GAAAtE,EAAAA,EAAAA,GAAaR,KAAAhC,GAGb+G,GAAAvE,EAAAA,EAAAA,GAAkBR,KAAA/B,GAClB+G,GAAAxE,EAAAA,EAAAA,GAAoBR,KAAA9B,GAEpB+G,EADc3C,IAAUT,EAE1BS,EAAMgB,OAAA9C,EAAAA,EAAAA,GACNR,KAAAjC,IAEE,MAAEuF,GAAUhB,EAClB,IAEI4C,GAFA,MAAEC,EAAA,eAAOC,EAAA,YAAgBC,EAAA,OAAaC,GAAWhC,EACjDiC,GAAoB,EAIxB,GAAI/F,EAAQgG,mBAAoB,CAC9B,MAAMhD,EAAUxC,KAAKiB,eAEfwE,GAAgBjD,GAAW9B,EAAmB4B,EAAO9C,GAErDkG,EACJlD,GAAWC,EAAsBH,EAAOT,EAAWrC,EAASoC,IAE1D6D,GAAgBC,KAClBL,GAAcM,EAAAA,EAAAA,IAASrD,EAAM9C,QAAQoG,aACjC,WACA,SACCtC,EAAMuC,gBACTP,EAAS,YAGsB,gBAA/B9F,EAAQgG,qBACVH,EAAc,OAElB,CAGA,GAAI7F,EAAQsG,QAAgC,qBAAfxC,EAAM4B,KAEjC,GACEJ,GACAxB,EAAM4B,QAAS,OAAAH,QAAA,IAAAA,OAAA,EAAAA,EAAiBG,OAChC1F,EAAQsG,UAAAtF,EAAAA,EAAAA,GAAWR,KAAA5B,GAEnB8G,GAAA1E,EAAAA,EAAAA,GAAOR,KAAA3B,QAEP,KACE0B,EAAAA,EAAAA,GAAAC,KAAA5B,EAAiBoB,EAAQsG,QACzBZ,EAAO1F,EAAQsG,OAAOxC,EAAM4B,MAC5BA,GAAOa,EAAAA,EAAAA,IAAY,OAAAjB,QAAA,IAAAA,OAAA,EAAAA,EAAYI,KAAMA,EAAM1F,IAC3CO,EAAAA,EAAAA,GAAAC,KAAA3B,EAAqB6G,IACrBnF,EAAAA,EAAAA,GAAAC,KAAA7B,EAAoB,KACtB,CAAE,MAAO6H,IACPjG,EAAAA,EAAAA,GAAAC,KAAA7B,EAAoB6H,EACtB,MAKFd,EAAO5B,EAAM4B,KAIf,GACqC,qBAA5B1F,EAAQyG,iBACC,qBAATf,GACI,YAAXI,EACA,CACA,IAAIW,EAQG,IAAAC,EALP,GACE,OAAApB,QAAA,IAAAA,GAAAA,EAAYS,mBACZ/F,EAAQyG,mBAAoB,OAAAjB,QAAA,IAAAA,OAAA,EAAAA,EAAmBiB,iBAE/CA,EAAkBnB,EAAWI,UAW7B,GATAe,EACqC,oBAA5BzG,EAAQyG,gBAETzG,EAAQyG,gBAER,QAFQC,GAAA1F,EAAAA,EAAAA,GAERR,KAAA1B,UAAA,IAAA4H,OAAA,EAAAA,EAAgC5C,MAAM4B,MAAA1E,EAAAA,EAAAA,GACtCR,KAAA1B,IAEFkB,EAAQyG,gBACVzG,EAAQsG,QAAqC,qBAApBG,EAC3B,IACEA,EAAkBzG,EAAQsG,OAAOG,IACjClG,EAAAA,EAAAA,GAAAC,KAAA7B,EAAoB,KACtB,CAAE,MAAO6H,IACPjG,EAAAA,EAAAA,GAAAC,KAAA7B,EAAoB6H,EACtB,CAI2B,qBAApBC,IACTX,EAAS,UACTJ,GAAOa,EAAAA,EAAAA,IACL,OAAAjB,QAAA,IAAAA,OAAA,EAAAA,EAAYI,KACZe,EACAzG,GAEF+F,GAAoB,EAExB,EAEA/E,EAAAA,EAAAA,GAAIR,KAAA7B,KACFgH,GAAA3E,EAAAA,EAAAA,GAAQR,KAAA7B,GACR+G,GAAA1E,EAAAA,EAAAA,GAAOR,KAAA3B,GACP+G,EAAiBe,KAAKC,MACtBd,EAAS,SAGX,MAAMe,EAA6B,aAAhBhB,EACbiB,EAAuB,YAAXhB,EACZiB,EAAqB,UAAXjB,EAEVkB,EAAYF,GAAaD,EA+B/B,MA7BuD,CACrDf,SACAD,cACAiB,YACAG,UAAsB,YAAXnB,EACXiB,UACAG,iBAAkBF,EAClBA,YACAtB,OACAW,cAAevC,EAAMuC,cACrBV,QACAC,iBACAuB,aAAcrD,EAAMsD,kBACpBC,cAAevD,EAAMwD,mBACrBC,iBAAkBzD,EAAMyD,iBACxBC,UAAW1D,EAAM2D,gBAAkB,GAAK3D,EAAMyD,iBAAmB,EACjEG,oBACE5D,EAAM2D,gBAAkBhC,EAAkBgC,iBAC1C3D,EAAMyD,iBAAmB9B,EAAkB8B,iBAC7CV,aACAc,aAAcd,IAAeC,EAC7Bc,eAAgBb,GAAmC,IAAxBjD,EAAMuC,cACjCwB,SAA0B,WAAhBhC,EACVE,oBACA+B,eAAgBf,GAAmC,IAAxBjD,EAAMuC,cACjC0B,QAASA,EAAQjF,EAAO9C,GACxBW,QAASH,KAAKG,QAIlB,CAEAW,YAAAA,CAAaa,GACX,MAAMmD,GAAAtE,EAAAA,EAAAA,GAAaR,KAAAhC,GAIbwJ,EAAaxH,KAAKkD,cAAA1C,EAAAA,EAAAA,GAAaR,KAAAlC,GAAoBkC,KAAKR,SAS9D,IARAO,EAAAA,EAAAA,GAAAC,KAAA/B,GAA2BuC,EAAAA,EAAAA,GAAAR,KAAAlC,GAAmBwF,QAC9CvD,EAAAA,EAAAA,GAAAC,KAAA9B,EAA6B8B,KAAKR,cAEI,KAAlCgB,EAAAA,EAAAA,GAAAR,KAAA/B,GAAyBiH,OAC3BnF,EAAAA,EAAAA,GAAAC,KAAA1B,GAAAkC,EAAAA,EAAAA,GAAiCR,KAAAlC,KAI/BoE,EAAAA,EAAAA,IAAoBsF,EAAY1C,GAClC,QAGF/E,EAAAA,EAAAA,GAAAC,KAAAhC,EAAsBwJ,GAGtB,MAAMC,EAAsC,CAAC,GAmCZ,KAA7B,OAAA9F,QAAA,IAAAA,OAAA,EAAAA,EAAerB,YAjCWoH,MAC5B,IAAK5C,EACH,OAAO,EAGT,MAAM,oBAAE6C,GAAwB3H,KAAKR,QAC/BoI,EAC2B,oBAAxBD,EACHA,IACAA,EAEN,GAC+B,QAA7BC,IACEA,KAA6BpH,EAAAA,EAAAA,GAAAR,KAAAtB,GAAmB6B,KAElD,OAAO,EAGT,MAAMsH,EAAgB,IAAI/H,IACxB,OAAA8H,QAAA,IAAAA,EAAAA,GAAApH,EAAAA,EAAAA,GAA4BR,KAAAtB,IAO9B,OAJIsB,KAAKR,QAAQsI,cACfD,EAAc5D,IAAI,SAGbR,OAAOC,MAAAlD,EAAAA,EAAAA,GAAKR,KAAAhC,IAAqB+J,MAAMnE,IAC5C,MAAMoE,EAAWpE,EAEjB,OADgBpD,EAAAA,EAAAA,GAAAR,KAAAhC,GAAoBgK,KAAclD,EAAWkD,IAC3CH,EAAcI,IAAID,EAAS,GAC7C,EAGsCN,KACxCD,EAAqBnH,WAAY,IAGnCK,EAAAA,EAAAA,GAAAX,KAAAZ,EAAA8I,GAAArH,KAAAb,KAAa,IAAKyH,KAAyB9F,GAC7C,CAqBAwG,aAAAA,GACEnI,KAAKc,eAEDd,KAAKiB,iBACPN,EAAAA,EAAAA,GAAAX,KAAAhB,EAAA+B,GAAAF,KAAAb,KAEJ,IAkBF,SAAAY,EA/WI+D,IAGAhE,EAAAA,EAAAA,GAAAX,KAAAb,EAAA8C,GAAApB,KAAAb,MAGA,IAAIoI,GAA2C5H,EAAAA,EAAAA,GAAAR,KAAAlC,GAAmBwG,MAChEtE,KAAKR,QACLmF,GAOF,OAJK,OAAAA,QAAA,IAAAA,GAAAA,EAAcmD,eACjBM,EAAUA,EAAQC,MAAMC,EAAAA,KAGnBF,CACT,UAAAzF,IAKE,IAFAhC,EAAAA,EAAAA,GAAAX,KAAAf,EAAAuC,GAAAX,KAAAb,MAGEuI,EAAAA,KACA/H,EAAAA,EAAAA,GAAAR,KAAAhC,GAAoBuJ,WACnBiB,EAAAA,EAAAA,IAAexI,KAAKR,QAAQkD,WAE7B,OAGF,MAOM+F,GAPOC,EAAAA,EAAAA,KACXlI,EAAAA,EAAAA,GAAAR,KAAAhC,GAAoB6H,cACpB7F,KAAKR,QAAQkD,WAKQ,GAEvB3C,EAAAA,EAAAA,GAAAC,KAAAzB,EAAuBoK,YAAW,MAC3BnI,EAAAA,EAAAA,GAAAR,KAAAhC,GAAoBuJ,SACvBvH,KAAKc,cACP,GACC2H,GACL,UAAA5F,IAE0B,IAAA+F,EACxB,OAGmB,QAHnBA,EAC2C,oBAAjC5I,KAAKR,QAAQqJ,gBACjB7I,KAAKR,QAAQqJ,iBAAArI,EAAAA,EAAAA,GAAgBR,KAAAlC,IAC7BkC,KAAKR,QAAQqJ,uBAAA,IAAAD,GAAAA,CAErB,UAAA9F,EAEuBgG,IACrBnI,EAAAA,EAAAA,GAAAX,KAAAd,EAAAuC,GAAAZ,KAAAb,OAEAD,EAAAA,EAAAA,GAAAC,KAAAvB,EAA+BqK,IAG7BP,EAAAA,KACyB,IAAzBvI,KAAKR,QAAQuC,UACZyG,EAAAA,EAAAA,KAAAhI,EAAAA,EAAAA,GAAeR,KAAAvB,KACiB,KAAjC+B,EAAAA,EAAAA,GAAAR,KAAAvB,KAKFsB,EAAAA,EAAAA,GAAAC,KAAAxB,EAA0BuK,aAAY,MAElC/I,KAAKR,QAAQwJ,6BACbC,EAAAA,EAAaC,eAEbvI,EAAAA,EAAAA,GAAAX,KAAArB,EAAAiC,GAAAC,KAAAb,KACF,IACFQ,EAAAA,EAAAA,GAAGR,KAAAvB,IACL,UAAAsC,KAGEJ,EAAAA,EAAAA,GAAAX,KAAAnB,EAAA8D,GAAA9B,KAAAb,OACAW,EAAAA,EAAAA,GAAAX,KAAAjB,EAAA+D,GAAAjC,KAAAb,MAAAW,EAAAA,EAAAA,GAA4BX,KAAAlB,EAAA+D,GAAAhC,KAAAb,MAC9B,UAAAwB,KAGEhB,EAAAA,EAAAA,GAAIR,KAAAzB,KACF4K,cAAA3I,EAAAA,EAAAA,GAAaR,KAAAzB,KACbwB,EAAAA,EAAAA,GAAAC,KAAAzB,OAAuB,GAE3B,UAAAkD,KAGEjB,EAAAA,EAAAA,GAAIR,KAAAxB,KACF4K,eAAA5I,EAAAA,EAAAA,GAAcR,KAAAxB,KACduB,EAAAA,EAAAA,GAAAC,KAAAxB,OAA0B,GAE9B,UAAAyD,IAuOE,MAAMK,GAAQ9B,EAAAA,EAAAA,GAAAR,KAAApC,GAAauE,gBAAgBa,OAAAxC,EAAAA,EAAAA,GAAMR,KAAApC,GAAcoC,KAAKR,SAEpE,GAAI8C,KAAA9B,EAAAA,EAAAA,GAAUR,KAAAlC,GACZ,OAGF,MAAM+D,GAAArB,EAAAA,EAAAA,GAAYR,KAAAlC,IAGlBiC,EAAAA,EAAAA,GAAAC,KAAAlC,EAAqBwE,IACrBvC,EAAAA,EAAAA,GAAAC,KAAAjC,EAAiCuE,EAAMgB,OAEnCtD,KAAKiB,iBACP,OAAAY,QAAA,IAAAA,GAAAA,EAAWH,eAAe1B,MAC1BsC,EAAM7B,YAAYT,MAEtB,UAAAkI,EAUQvG,GACN0H,EAAAA,EAAcC,OAAM,KAEd3H,EAAcrB,WAChBN,KAAKM,UAAUqD,SAAS4F,IACtBA,GAAA/I,EAAAA,EAAAA,GAASR,KAAAhC,GAAoB,KAKjCwC,EAAAA,EAAAA,GAAAR,KAAApC,GAAauE,gBAAgBC,OAAO,CAClCE,OAAA9B,EAAAA,EAAAA,GAAOR,KAAAlC,GACPuE,KAAM,0BACN,GAEN,CAcF,SAAS3B,EACP4B,EACA9C,GAEA,OAfF,SACE8C,EACA9C,GAEA,OACsB,IAApBA,EAAQuC,UACPO,EAAMgB,MAAMuC,iBACY,UAAvBvD,EAAMgB,MAAMgC,SAA+C,IAAzB9F,EAAQgK,aAEhD,CAOIC,CAAkBnH,EAAO9C,IACxB8C,EAAMgB,MAAMuC,cAAgB,GAC3BzE,EAAckB,EAAO9C,EAASA,EAAQkK,eAE5C,CAEA,SAAStI,EACPkB,EACA9C,EACAmK,GAIA,IAAwB,IAApBnK,EAAQuC,QAAmB,CAC7B,MAAMlC,EAAyB,oBAAV8J,EAAuBA,EAAMrH,GAASqH,EAE3D,MAAiB,WAAV9J,IAAiC,IAAVA,GAAmB0H,EAAQjF,EAAO9C,EAClE,CACA,OAAO,CACT,CAEA,SAASiD,EACPH,EACAT,EACArC,EACAoC,GAEA,OACsB,IAApBpC,EAAQuC,UACPO,IAAUT,IAAqC,IAAxBD,EAAYG,YAClCvC,EAAQoK,UAAmC,UAAvBtH,EAAMgB,MAAMgC,SAClCiC,EAAQjF,EAAO9C,EAEnB,CAEA,SAAS+H,EACPjF,EACA9C,GAEA,OAAO8C,EAAMuH,cAAcrK,EAAQkD,UACrC,C,qBCptBA,SAASoH,IACP,IAAIC,GAAU,EACd,MAAO,CACLC,WAAYA,KACVD,GAAU,CAAK,EAEjBE,MAAOA,KACLF,GAAU,CAAI,EAEhBA,QAASA,IACAA,EAGb,CAEA,IAAMG,EAAuCC,EAAAA,cAAcL,KAI9CM,EAA6BA,IAClCD,EAAAA,WAAWD,G,WC5BbG,GAA2BF,EAAAA,eAAc,GAElCG,GAAiBA,IAAYH,EAAAA,WAAWE,I,IAClBA,GAAmBE,S,SCMzCC,GAAkCA,CAO7ChL,EAOAiL,MAEIjL,EAAQoK,UAAYpK,EAAQsI,gBAEzB2C,EAAmBV,YACtBvK,EAAQgK,cAAe,GAE3B,EAGWkB,GACXD,IAEMN,EAAAA,WAAU,KACdM,EAAmBT,YAAY,GAC9B,CAACS,GAAoB,EAGbE,GAAc/B,IAgBrB,IAVJ,OACA3F,EAAA,mBACAwH,EAAA,aACA3C,EAAA,MACAxF,GACFsG,EAME,OACE3F,EAAOsD,UACNkE,EAAmBV,YACnB9G,EAAOoD,YACR/D,IACAsI,EAAAA,GAAAA,GAAiB9C,EAAc,CAAC7E,EAAOkC,MAAO7C,GAAO,EC9C5CuI,GACXrG,IAEIA,EAAiBoF,UAGuB,kBAA/BpF,EAAiB9B,YAC1B8B,EAAiB9B,UAAY,IAEjC,EAQWoI,GAAgBA,CAC3BtG,EAGAvB,KACG,OAAAuB,QAAA,IAAAA,OAAA,EAAAA,EAAkBoF,WAAY3G,EAAOqD,UAE7B/B,GAAkBA,CAO7BC,EAOAjC,EACAkI,IAEAlI,EAASgC,gBAAgBC,GAAkB6D,OAAM,KAC/CoC,EAAmBT,YAAY,IClB5B,SAASe,GAASvL,EAA0BwL,GACjD,OCxBK,SAOLxL,EAOAyL,EACAD,GAUA,MAAMzL,GAAS2L,EAAAA,GAAAA,IAAeF,GACxBG,EAAcb,KACdG,EAAqBL,IACrB5F,EAAmBjF,EAAOuC,oBAAoBtC,GAGpDgF,EAAiBgB,mBAAqB2F,EAClC,cACA,aAEJN,GAAgBrG,GAChBgG,GAAgChG,EAAkBiG,GAElDC,GAA2BD,GAE3B,MAAOlI,GAAkB4H,EAAAA,UACvB,IACE,IAAIc,EACF1L,EACAiF,KAIAvB,EAASV,EAASQ,oBAAoByB,GA4B5C,GA1BM2F,EAAAA,qBACEA,EAAAA,aACHiB,IACC,MAAMC,EAAcF,EAChB,KAAM,EACN5I,EAAS+I,UAAUjC,EAAAA,EAAckC,WAAWH,IAMhD,OAFA7I,EAASzB,eAEFuK,CAAA,GAET,CAAC9I,EAAU4I,KAEb,IAAM5I,EAASa,qBACf,IAAMb,EAASa,qBAGX+G,EAAAA,WAAU,KAGd5H,EAASrC,WAAWsE,EAAkB,CAAElE,WAAW,GAAQ,GAC1D,CAACkE,EAAkBjC,IAGlBuI,GAActG,EAAkBvB,GAIlC,MAAMsB,GAAgBC,EAAkBjC,EAAUkI,GAIpD,GACEE,GAAY,CACV1H,SACAwH,qBACA3C,aAActD,EAAiBsD,aAC/BxF,MAAO/C,EACJ4C,gBACA6B,IAKCQ,EAAiBgH,aAGvB,MAAMvI,EAAOkC,MAIf,OAAQX,EAAiBmD,oBAErB1E,EADAV,EAASgB,YAAYN,EAE3B,CDlFSwI,CAAajM,EAAS7B,EAAeqN,EAC9C,C","sources":["../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/isRestoring.ts","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch } from './retryer'\nimport type { QueryClient } from './queryClient'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    this.#updateQuery()\n\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.#trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.#currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.#currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let { error, errorUpdatedAt, fetchStatus, status } = state\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!state.dataUpdatedAt) {\n          status = 'pending'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Select data if needed\n    if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: state.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.throwOnError) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    shouldThrowError(throwOnError, [result.error, query])\n  )\n}\n","import type { DefaultError } from '@tanstack/query-core'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => typeof query.state.data === 'undefined'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n","'use client'\nimport * as React from 'react'\n\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, fetchOptimistic, shouldSuspend } from './suspense'\nimport type { UseBaseQueryOptions } from './types'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange))\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    // Do the same thing as the effect right above because the effect won't run\n    // when we suspend but also, the component won't re-mount so our observer would\n    // be out of date.\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"],"names":["QueryObserver","_client","WeakMap","_currentQuery","_currentQueryInitialState","_currentResult","_currentResultState","_currentResultOptions","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","_executeFetch","WeakSet","_updateStaleTimeout","_computeRefetchInterval","_updateRefetchInterval","_updateTimers","_clearStaleTimeout","_clearRefetchInterval","_updateQuery","_notify","Subscribable","constructor","client","options","super","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","Set","_classPrivateFieldSet","this","bindMethods","setOptions","refetch","bind","onSubscribe","listeners","size","_classPrivateFieldGet","addObserver","shouldFetchOnMount","_classPrivateMethodGet","_executeFetch2","call","updateResult","_updateTimers2","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","_clearStaleTimeout2","_clearRefetchInterval2","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","enabled","Error","_updateQuery2","shallowEqualObjects","getQueryCache","notify","type","query","observer","mounted","shouldFetchOptionally","staleTime","_updateStaleTimeout2","nextRefetchInterval","_computeRefetchInterval2","_updateRefetchInterval2","getOptimisticResult","build","result","createResult","optimisticResult","getCurrentResult","shouldAssignObserverCurrentProperties","state","trackResult","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","arguments","length","undefined","fetch","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","cancelRefetch","prevResult","prevResultState","prevResultOptions","queryInitialState","data","error","errorUpdatedAt","fetchStatus","status","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","dataUpdatedAt","select","replaceData","selectError","placeholderData","_classPrivateFieldGet2","Date","now","isFetching","isPending","isError","isLoading","isSuccess","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","isStale","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","throwOnError","some","typedKey","has","_notify2","onQueryUpdate","promise","catch","noop","isServer","isValidTimeout","timeout","timeUntilStale","setTimeout","_ref","refetchInterval","nextInterval","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","notifyManager","batch","listener","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","createValue","isReset","clearReset","reset","QueryErrorResetBoundaryContext","React","useQueryErrorResetBoundary","IsRestoringContext","useIsRestoring","Provider","ensurePreventErrorBoundaryRetry","errorResetBoundary","useClearResetErrorBoundary","getHasError","shouldThrowError","ensureStaleTime","shouldSuspend","useQuery","queryClient","Observer","useQueryClient","isRestoring","onStoreChange","unsubscribe","subscribe","batchCalls","queryHash","useBaseQuery"],"sourceRoot":""}