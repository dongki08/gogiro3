{"version":3,"file":"static/js/8377.bf6dcc44.chunk.js","mappings":"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","sources":["api/menuInfoApi.ts","atom/atomMenuInfo.ts","components/community/MenuListPlaceholder.js","components/adminInfo/styles/TSMenuStyle.ts","components/common/MenuListWireframe.js","components/adminInfo/MenuList.tsx","components/adminInfo/MenuModify.tsx","pages/admin/TSAdminMenuPage.tsx"],"sourcesContent":["import authAxios from \"../util/tokenUtil\";\r\nimport { API_SERVER_HOST } from \"./config\";\r\n\r\nconst host = `${API_SERVER_HOST}/api/owner/menu`;\r\n\r\n// 메뉴정보 리스트 가져오기\r\nexport const getMenu = async ({ ishop }: { ishop: number }) => {\r\n  try {\r\n    const header = { headers: { \"Content-type\": \"application/json\" } };\r\n    const response = await authAxios.get(`${host}`, header);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return undefined;\r\n  }\r\n};\r\n\r\n// 메뉴정보 수정하기\r\nexport const putMenu = async ({ menuInfo }: { menuInfo: FormData }) => {\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const response = await authAxios.put(`${host}`, menuInfo, header);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return undefined;\r\n  }\r\n};\r\n\r\n// 메뉴정보 등록하기\r\nexport const postMenu = async ({ menuInfo }: { menuInfo: FormData }) => {\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const response = await authAxios.post(`${host}`, menuInfo, header);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return undefined;\r\n  }\r\n};\r\n\r\n// 메뉴정보 삭제하기\r\nexport const deleteMenu = async ({ imenu }: { imenu: number }) => {\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"application/json\" } };\r\n    const response = await authAxios.delete(`${host}?imenu=${imenu}`, header);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return undefined;\r\n  }\r\n};\r\n","import { atom } from \"recoil\";\r\n\r\ninterface MenuState {\r\n  checkShop: number;\r\n  imenu: number;\r\n  ishop: number;\r\n  price: number;\r\n  menu: string;\r\n  pic: string;\r\n}\r\n\r\n// atom 기본값 배열\r\nexport const defaultMenuState = {\r\n  checkShop: 0,\r\n  imenu: 0,\r\n  ishop: 0,\r\n  price: 0,\r\n  menu: \"\",\r\n  pic: \"\",\r\n};\r\n\r\nexport const atomMenuInfoState = atom<MenuState>({\r\n  key: \"atomMenuInfoState\",\r\n  default: defaultMenuState,\r\n});\r\n\r\nexport const menuRefreshState = atom({\r\n  key: \"menuRefreshState\",\r\n  default: 1,\r\n});\r\n","import { useState } from \"react\";\r\n\r\nconst MenuListPlaceholder = ({ src, alt, placeholder, ...props }) => {\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      {!loaded && (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          {/* 여기에 와이어프레임 또는 placeholder 컴포넌트를 렌더링 */}\r\n          {placeholder}\r\n        </div>\r\n      )}\r\n      <img\r\n        src={src}\r\n        alt={alt}\r\n        style={{\r\n          width: \"160px\",\r\n          height: \"160px\",\r\n          cursor: \"pointer\",\r\n          borderRadius: \"4px\",\r\n          display: loaded ? \"block\" : \"none\",\r\n        }}\r\n        onLoad={() => setLoaded(true)}\r\n        {...props}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MenuListPlaceholder;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const MenuContainerStyle = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px; // 항목 사이의 간격\r\n  justify-content: flex-start;\r\n`;\r\n\r\nexport const TSMenuStyle = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 10px;\r\n  .menu-img {\r\n    width: 160px;\r\n    height: 160px;\r\n    background: url(<path-to-image>), lightgray 50% / cover no-repeat, #f3f4f6;\r\n  }\r\n  .menu-info {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 5px;\r\n    width: 160px;\r\n    height: 60px;\r\n    position: absolute;\r\n    right: 0px;\r\n    top: 100px;\r\n    opacity: 0.5;\r\n    background: var(--gray-scale-1000, #000);\r\n    color: #fff;\r\n    padding: 10px;\r\n    /* 12/regular */\r\n    font-family: Pretendard;\r\n    font-size: 12px;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    line-height: 150%; /* 18px */\r\n  }\r\n  .menu-title {\r\n    white-space: nowrap; /* 줄바꿈 없이 한 줄로 표시 */\r\n    overflow: hidden; /* 내용이 넘칠 경우 숨김 처리 */\r\n    text-overflow: ellipsis; /* 넘친 텍스트를 말줄임표로 표시 */\r\n    width: 100%; /* 부모 컨테이너의 폭에 맞춤 */\r\n  }\r\n`;\r\n","import { FadeLoader } from \"react-spinners\";\r\nimport { ColorStyle } from \"../../styles/common/CommonStyle\";\r\n\r\nconst MenuListWireframe = () => {\r\n  const laodingCss = {\r\n    position: \"relative\",\r\n    width: \"160px\",\r\n    height: \"160px\",\r\n    background: \"rgba(255,255,255,0.8)\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    gap: \"20px\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: \"5px\",\r\n    boxShadow: \" 4px 4px 4px 0px rgba(0, 0, 0, 0.25)\",\r\n  };\r\n  return (\r\n    <div style={laodingCss}>\r\n      <FadeLoader color={ColorStyle.g200} loading={true} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuListWireframe;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { API_SERVER_HOST } from \"../../api/config\";\r\nimport { getMenu } from \"../../api/menuInfoApi\";\r\nimport { atomMenuInfoState, menuRefreshState } from \"../../atom/atomMenuInfo\";\r\nimport AdminSmallImageWireframe from \"../common/AdminSmallImageWireframe\";\r\nimport Fetching from \"../common/Fetching\";\r\nimport ResultModal from \"../common/ResultModal\";\r\nimport MenuListPlaceholder from \"../community/MenuListPlaceholder\";\r\nimport useModal from \"../meat/hooks/useModal\";\r\nimport { MenuContainerStyle, TSMenuStyle } from \"./styles/TSMenuStyle\";\r\nimport { TSBackgroundBoxStyle, TSBoxInnerStyle } from \"./styles/TSModifyStyle\";\r\nimport MenuListWireframe from \"../common/MenuListWireframe\";\r\n\r\nconst host = API_SERVER_HOST;\r\n\r\n// 메뉴 타입 정의\r\ninterface Menu {\r\n  checkShop: number;\r\n  imenu: number;\r\n  ishop: number;\r\n  price: number;\r\n  menu: string;\r\n  pic: string;\r\n}\r\n\r\nconst MenuList = () => {\r\n  const { isModal, openModal, closeModal } = useModal();\r\n  const menuInfo = useRecoilValue(atomMenuInfoState);\r\n  const refreshMenu = useRecoilValue(menuRefreshState);\r\n  const [imenu, setImenu] = useRecoilState(atomMenuInfoState);\r\n  const [menus, setMenus] = useState<Menu[]>([]);\r\n  const [fetching, setFetching] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMenuInfo = async () => {\r\n      setFetching(true);\r\n      try {\r\n        const data = await getMenu({ ishop: menuInfo.ishop });\r\n        if (data) {\r\n          setMenus(data);\r\n        } else {\r\n          openModal(\"메뉴 정보\", \"가져오는데 실패하였습니다\", closeModal);\r\n          return;\r\n        }\r\n      } catch (error) {\r\n        openModal(\"서버 오류\", \"관리자에게 문의하세요\", closeModal);\r\n        return;\r\n      } finally {\r\n        setFetching(false);\r\n      }\r\n      console.log(\"등록된 메뉴리스트\", menus);\r\n    };\r\n    fetchMenuInfo();\r\n  }, [refreshMenu]);\r\n\r\n  const handleClickMenu = (menu: Menu) => {\r\n    setImenu(menu);\r\n    console.log(menuInfo.imenu);\r\n  };\r\n\r\n  return (\r\n    <TSBackgroundBoxStyle>\r\n      {/* 모달창 */}\r\n      {isModal.isOpen && (\r\n        <ResultModal\r\n          title={isModal.title}\r\n          content={isModal.content}\r\n          callFn={isModal.callFn}\r\n        />\r\n      )}\r\n      {fetching ? <Fetching /> : null}\r\n      <TSBoxInnerStyle>\r\n        <div className=\"big-title\">메뉴목록</div>\r\n        <div className=\"title\">\r\n          {/* <div>메뉴목록</div> */}\r\n          {/* <div className=\"essential\">*</div> */}\r\n        </div>\r\n        <MenuContainerStyle>\r\n          {menus.map((menu, index) => (\r\n            <TSMenuStyle\r\n              key={index}\r\n              onClick={() => {\r\n                handleClickMenu(menu);\r\n              }}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <div className=\"menu-img\">\r\n                <MenuListPlaceholder\r\n                  src={\r\n                    menu.pic\r\n                      ? `${host}/pic/shop/${menu.ishop}/menu/${menu.pic}`\r\n                      : `${process.env.PUBLIC_URL}/assets/images/menuImg.png`\r\n                  }\r\n                  alt={`미리보기${index}`}\r\n                  // style={{\r\n                  //   maxWidth: \"160px\",\r\n                  // }}\r\n                  placeholder={\r\n                    <div>\r\n                      <MenuListWireframe />\r\n                    </div>\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"menu-info\">\r\n                <div className=\"menu-title\">{menu.menu}</div>\r\n                <div>\r\n                  {new Intl.NumberFormat(\"ko-KR\").format(menu.price)} 원\r\n                </div>\r\n              </div>\r\n            </TSMenuStyle>\r\n          ))}\r\n        </MenuContainerStyle>\r\n      </TSBoxInnerStyle>\r\n    </TSBackgroundBoxStyle>\r\n  );\r\n};\r\n\r\nexport default MenuList;\r\n","import { ChangeEvent, useRef, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { API_SERVER_HOST } from \"../../api/config\";\r\nimport { deleteMenu, postMenu, putMenu } from \"../../api/menuInfoApi\";\r\nimport {\r\n  atomMenuInfoState,\r\n  defaultMenuState,\r\n  menuRefreshState,\r\n} from \"../../atom/atomMenuInfo\";\r\nimport Fetching from \"../common/Fetching\";\r\nimport ResultModal from \"../common/ResultModal\";\r\nimport useModal from \"../meat/hooks/useModal\";\r\nimport { ButtonStyleTS } from \"./styles/ButtonStyleTS\";\r\nimport {\r\n  OnClickBoxStyle,\r\n  TSBackgroundBoxStyle,\r\n  TSBoxInnerStyle,\r\n} from \"./styles/TSModifyStyle\";\r\nimport { TSInputStyle, TSTextFieldStyle } from \"./styles/TSTextFieldStyle\";\r\nimport AdminImagePlaceholder from \"../community/AdminImagePlaceholder\";\r\nimport AdminSmallImageWireframe from \"../common/AdminSmallImageWireframe\";\r\n\r\nconst host = API_SERVER_HOST;\r\n\r\n// 텍스트필드 스타일 props 타입 정의\r\ntype TextFieldStateProps = \"default\" | \"focus\" | \"error\" | \"filled\";\r\n\r\nconst MenuModify = () => {\r\n  // 커스텀 훅\r\n  const { isModal, openModal, closeModal } = useModal();\r\n  const [fetching, setFetching] = useState(false);\r\n  // 메뉴정보 상태관리\r\n  const [menuInfo, setMenuInfo] = useRecoilState(atomMenuInfoState);\r\n  const [refreshTrigger, setRefreshTrigger] = useRecoilState(menuRefreshState);\r\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\r\n\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // 사진등록 버튼\r\n  const handleClickAdd = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  // 이미지 변경 이벤트 핸들러\r\n  const handleChangeImage = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n      // 파일 크기가 5MB 이하인지 확인\r\n      if (file.size > 5 * 1024 * 1024) {\r\n        openModal(\"사진 등록\", \"5MB 이하만 가능합니다.\", closeModal);\r\n        return;\r\n      }\r\n      // const reader = new FileReader();\r\n      // reader.onloadend = () => {\r\n      //   // 미리보기 URL 생성 및 Recoil 상태 업데이트\r\n      //   const newPic = reader.result as string;\r\n      //   setMenuInfo(prevState => ({ ...prevState, pic: newPic }));\r\n      //   setSelectedFile(file);\r\n      // };\r\n      // reader.readAsDataURL(file);\r\n      const newPic = URL.createObjectURL(file);\r\n      setMenuInfo(prev => ({ ...prev, pic: newPic }));\r\n      setSelectedFile(file);\r\n    }\r\n  };\r\n\r\n  // 메뉴명 변경 이벤트 핸들러\r\n  const handleChangeMenu = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const newMenuValue = e.target.value;\r\n    setMenuInfo({ ...menuInfo, menu: newMenuValue && newMenuValue });\r\n  };\r\n  // 메뉴명 텍스트필드 스타일 상태관리\r\n  const [menuState, setMenuState] = useState<TextFieldStateProps>(\"default\");\r\n  const handleMenuFocus = () => setMenuState(\"focus\");\r\n  const handleMenuBlur = () => {\r\n    const menuValue = menuInfo.menu;\r\n    if (menuValue.length === 0 || menuValue.length > 30) {\r\n      setMenuState(\"error\");\r\n    } else {\r\n      setMenuState(menuValue ? \"filled\" : \"default\");\r\n    }\r\n  };\r\n\r\n  // 가격 변경 이벤트 핸들러\r\n  const handleChangePrice = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const newPriceValue = e.target.value;\r\n    setMenuInfo({\r\n      ...menuInfo,\r\n      price: newPriceValue ? parseInt(newPriceValue, 10) : 0,\r\n    });\r\n  };\r\n  // 가격 텍스트필드 스타일 상태관리\r\n  const [priceState, setPriceState] = useState<TextFieldStateProps>(\"default\");\r\n  const handlePriceFocus = () => setPriceState(\"focus\");\r\n  const handlePriceBlur = () => {\r\n    const priceValue = menuInfo.price;\r\n    if (priceValue <= 0 || priceValue == 0) {\r\n      setPriceState(\"error\");\r\n    } else {\r\n      setPriceState(priceValue ? \"filled\" : \"default\");\r\n    }\r\n  };\r\n\r\n  // 메뉴등록 실행\r\n  const handleMenuPost = async () => {\r\n    setFetching(true);\r\n\r\n    const formData = new FormData();\r\n\r\n    if (selectedFile) {\r\n      formData.append(\"pic\", selectedFile);\r\n    }\r\n\r\n    const dto = new Blob(\r\n      [\r\n        JSON.stringify({\r\n          menu: menuInfo.menu,\r\n          price: menuInfo.price,\r\n        }),\r\n      ],\r\n      { type: \"application/json\" },\r\n    );\r\n    formData.append(\"dto\", dto);\r\n\r\n    try {\r\n      const result = await postMenu({ menuInfo: formData });\r\n      if (result) {\r\n        console.log(\"메뉴 정보 수정 성공\");\r\n        console.log(\"메뉴 정보\", menuInfo);\r\n        openModal(\"메뉴 정보\", \"메뉴가 등록 되었습니다.\", closeModal);\r\n        setRefreshTrigger(refreshTrigger * -1);\r\n        setMenuInfo(defaultMenuState);\r\n        return;\r\n      } else {\r\n        console.log(\"메뉴정보\", menuInfo);\r\n        openModal(\"메뉴 정보\", \"등록에 실패하였습니다\", closeModal);\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.log(\"메뉴 정보 등록 안됨\");\r\n      openModal(\"서버 오류\", \"관리자에게 문의하세요\", closeModal);\r\n      return;\r\n    } finally {\r\n      setFetching(false);\r\n    }\r\n  };\r\n\r\n  // 메뉴수정 실행\r\n  const handleMenuModify = async () => {\r\n    if (!menuInfo.imenu) {\r\n      openModal(\"메뉴 수정\", \"수정할 메뉴를 선택해주세요\", closeModal);\r\n      return;\r\n    }\r\n    setFetching(true);\r\n\r\n    const formData = new FormData();\r\n\r\n    if (selectedFile) {\r\n      formData.append(\"pic\", selectedFile);\r\n    }\r\n\r\n    const dto = new Blob(\r\n      [\r\n        JSON.stringify({\r\n          imenu: menuInfo.imenu,\r\n          menu: menuInfo.menu,\r\n          price: menuInfo.price,\r\n        }),\r\n      ],\r\n      { type: \"application/json\" },\r\n    );\r\n    formData.append(\"dto\", dto);\r\n\r\n    try {\r\n      const result = await putMenu({ menuInfo: formData });\r\n      if (result) {\r\n        console.log(\"메뉴 정보 수정 성공\");\r\n        console.log(\"메뉴 정보\", menuInfo);\r\n        openModal(\"메뉴 정보\", \"메뉴가 등록 되었습니다.\", closeModal);\r\n        setRefreshTrigger(refreshTrigger * -1);\r\n        setMenuInfo(defaultMenuState);\r\n        return;\r\n      } else {\r\n        console.log(\"메뉴정보\", menuInfo);\r\n        openModal(\"메뉴 정보\", \"등록에 실패하였습니다\", closeModal);\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.log(\"메뉴 정보 등록 안됨\");\r\n      openModal(\"서버 오류\", \"관리자에게 문의하세요\", closeModal);\r\n      return;\r\n    } finally {\r\n      setFetching(false);\r\n    }\r\n  };\r\n\r\n  // 메뉴 삭제실행\r\n  const handleDelete = async () => {\r\n    if (!menuInfo.imenu) {\r\n      openModal(\"메뉴 삭제\", \"삭제할 메뉴를 선택해주세요\", closeModal);\r\n      return;\r\n    }\r\n    setFetching(true);\r\n    try {\r\n      const result = await deleteMenu({ imenu: menuInfo.imenu });\r\n      if (result) {\r\n        openModal(\"메뉴 삭제\", \"메뉴가 삭제되었습니다\", closeModal);\r\n        setRefreshTrigger(refreshTrigger * -1);\r\n        setMenuInfo(defaultMenuState);\r\n        return;\r\n      } else {\r\n        openModal(\"메뉴 삭제\", \"메뉴 삭제를 실패하였습니다\", closeModal);\r\n        console.log(\"imenu\", menuInfo.imenu);\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      openModal(\"서버 오류\", \"관리자에게 문의하세요\", closeModal);\r\n      return;\r\n    } finally {\r\n      setFetching(false);\r\n    }\r\n  };\r\n\r\n  // 초기화\r\n  const handleReset = () => {\r\n    setMenuInfo(defaultMenuState);\r\n  };\r\n\r\n  return (\r\n    <TSBackgroundBoxStyle>\r\n      {/* 모달창 */}\r\n      {isModal.isOpen && (\r\n        <ResultModal\r\n          title={isModal.title}\r\n          content={isModal.content}\r\n          callFn={isModal.callFn}\r\n        />\r\n      )}\r\n      {fetching ? <Fetching /> : null}\r\n      <TSBoxInnerStyle>\r\n        <div className=\"big-title\">메뉴 등록 / 수정하기</div>\r\n        <div className=\"text-guide\">\r\n          메뉴목록에서 메뉴를 클릭하시면 해당 메뉴를 수정할 수 있습니다\r\n        </div>\r\n        <div className=\"title\">\r\n          <div>메뉴사진</div>\r\n          <div className=\"essential\">*</div>\r\n        </div>\r\n        <div className=\"pics-container\">\r\n          <div className=\"text-guide\">5MB 이하 1장만 등록 가능합니다</div>\r\n          <ButtonStyleTS type=\"button\" onClick={handleClickAdd}>\r\n            사진등록\r\n          </ButtonStyleTS>\r\n          <input\r\n            type=\"file\"\r\n            ref={fileInputRef}\r\n            style={{ display: \"none\" }}\r\n            onChange={handleChangeImage}\r\n          />\r\n          <div className=\"pics-thumb\">\r\n            {menuInfo.pic && (\r\n              <AdminImagePlaceholder\r\n                src={\r\n                  menuInfo.pic.startsWith(\"blob\")\r\n                    ? menuInfo.pic\r\n                    : `${host}/pic/shop/${menuInfo.ishop}/menu/${menuInfo.pic}`\r\n                }\r\n                alt=\"미리보기 이미지\"\r\n                // style={{\r\n                //   maxWidth: \"92px\",\r\n                //   borderRadius: \"4px\",\r\n                // }}\r\n                placeholder={\r\n                  <div>\r\n                    <AdminSmallImageWireframe />\r\n                  </div>\r\n                }\r\n              />\r\n            )}\r\n          </div>\r\n          {/* <div className=\"text-guide\">썸네일 클릭 시 삭제</div> */}\r\n        </div>\r\n      </TSBoxInnerStyle>\r\n      <TSBoxInnerStyle>\r\n        <div className=\"title\">\r\n          <div>메뉴명</div>\r\n          <div className=\"essential\">*</div>\r\n        </div>\r\n        <TSTextFieldStyle state={menuState}>\r\n          <TSInputStyle\r\n            type=\"text\"\r\n            placeholder=\"메뉴명을 입력해주세요\"\r\n            value={menuInfo.menu || \"\"}\r\n            onChange={handleChangeMenu}\r\n            onFocus={handleMenuFocus}\r\n            onBlur={handleMenuBlur}\r\n          />\r\n        </TSTextFieldStyle>\r\n        <div className=\"name-guide\">\r\n          <div className=\"text-guide\">숫자, 한글, 영문, 특수문자 사용가능</div>\r\n          <div className=\"text-length\">{menuInfo.menu?.length}/30</div>\r\n        </div>\r\n        <div className=\"title\">\r\n          <div>메뉴가격</div>\r\n          <div className=\"essential\">*</div>\r\n        </div>\r\n        <TSTextFieldStyle state={priceState}>\r\n          <TSInputStyle\r\n            type=\"number\"\r\n            placeholder=\"메뉴 가격을 입력해주세요\"\r\n            value={menuInfo.price || \"\"}\r\n            onChange={handleChangePrice}\r\n            onFocus={handlePriceFocus}\r\n            onBlur={handlePriceBlur}\r\n          />\r\n        </TSTextFieldStyle>\r\n        <div className=\"text-guide\">숫자만 사용가능, 단위: 원</div>\r\n      </TSBoxInnerStyle>\r\n      <OnClickBoxStyle>\r\n        <ButtonStyleTS type=\"button\" onClick={handleMenuPost}>\r\n          등록하기\r\n        </ButtonStyleTS>\r\n        <ButtonStyleTS type=\"button\" onClick={handleMenuModify}>\r\n          수정하기\r\n        </ButtonStyleTS>\r\n        <ButtonStyleTS type=\"button\" onClick={handleDelete}>\r\n          삭제하기\r\n        </ButtonStyleTS>\r\n        <ButtonStyleTS type=\"button\" onClick={handleReset}>\r\n          초기화\r\n        </ButtonStyleTS>\r\n      </OnClickBoxStyle>\r\n    </TSBackgroundBoxStyle>\r\n  );\r\n};\r\n\r\nexport default MenuModify;\r\n","import MenuList from \"../../components/adminInfo/MenuList\";\r\nimport MenuModify from \"../../components/adminInfo/MenuModify\";\r\nimport {\r\n  TSAdminInfoWrapStyle,\r\n  TSNavStyle,\r\n  TSPreviewWrapStyle,\r\n  TSShopStyle,\r\n  TSWrapInnerStyle,\r\n} from \"../../components/adminInfo/styles/TSModifyStyle\";\r\n\r\nconst TSAdminMenuPage = () => {\r\n  return (\r\n    <TSAdminInfoWrapStyle>\r\n      <TSNavStyle>\r\n        <div className=\"page-title\">메뉴 관리</div>\r\n        {/* <ButtonStyleTS type=\"button\">저장</ButtonStyleTS> */}\r\n      </TSNavStyle>\r\n      <TSWrapInnerStyle>\r\n        <TSShopStyle>\r\n          <MenuList />\r\n          {/* <MenuPost /> */}\r\n        </TSShopStyle>\r\n        <TSPreviewWrapStyle>\r\n          <MenuModify />\r\n        </TSPreviewWrapStyle>\r\n      </TSWrapInnerStyle>\r\n    </TSAdminInfoWrapStyle>\r\n  );\r\n};\r\n\r\nexport default TSAdminMenuPage;\r\n"],"names":["host","concat","API_SERVER_HOST","defaultMenuState","checkShop","imenu","ishop","price","menu","pic","atomMenuInfoState","atom","key","default","menuRefreshState","_ref","src","alt","placeholder","props","loaded","setLoaded","useState","_jsxs","_Fragment","children","_jsx","style","width","height","cursor","borderRadius","display","onLoad","MenuContainerStyle","styled","div","_templateObject","_taggedTemplateLiteral","TSMenuStyle","_templateObject2","MenuListWireframe","position","background","flexDirection","gap","justifyContent","alignItems","boxShadow","FadeLoader","color","ColorStyle","g200","loading","MenuList","isModal","openModal","closeModal","useModal","menuInfo","useRecoilValue","refreshMenu","setImenu","useRecoilState","menus","setMenus","fetching","setFetching","useEffect","async","data","header","headers","authAxios","get","error","console","log","getMenu","fetchMenuInfo","TSBackgroundBoxStyle","isOpen","ResultModal","title","content","callFn","Fetching","TSBoxInnerStyle","className","map","index","onClick","handleClickMenu","MenuListPlaceholder","process","Intl","NumberFormat","format","MenuModify","_menuInfo$menu","setMenuInfo","refreshTrigger","setRefreshTrigger","selectedFile","setSelectedFile","fileInputRef","useRef","menuState","setMenuState","priceState","setPriceState","ButtonStyleTS","type","handleClickAdd","_fileInputRef$current","current","click","ref","onChange","e","target","files","file","size","newPic","URL","createObjectURL","prev","AdminImagePlaceholder","startsWith","AdminSmallImageWireframe","TSTextFieldStyle","state","TSInputStyle","value","newMenuValue","onFocus","handleMenuFocus","onBlur","handleMenuBlur","menuValue","length","newPriceValue","parseInt","handlePriceFocus","handlePriceBlur","priceValue","OnClickBoxStyle","formData","FormData","append","dto","Blob","JSON","stringify","result","_ref3","post","postMenu","_ref2","put","putMenu","_ref4","delete","deleteMenu","handleReset","TSAdminMenuPage","TSAdminInfoWrapStyle","TSNavStyle","TSWrapInnerStyle","TSShopStyle","TSPreviewWrapStyle"],"sourceRoot":""}